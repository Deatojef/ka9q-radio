.TH "md__2Users_2karn_2src_2ka9q-radio_2README" 3 "KA9Q-Radio" \" -*- nroff -*-
.ad l
.nh
.SH NAME
md__2Users_2karn_2src_2ka9q-radio_2README \- README 
.PP
\fIka9q-radio\fP is a software defined radio for Linux I've been working on for a few years\&. It is very different from most other amateur SDRs in several respects:
.PP
.IP "1." 4
Efficient multichannel reception\&. A single Raspberry Pi 4 can simultaneously demodulate, in real time, every NBFM channel on a VHF/UHF band (i\&.e\&., several hundred) with plenty of real time left over\&.
.PP
.PP
A mid-range x86 can handle the RX888 MkII at full sample rate (129\&.6 MHz), receiving multiple channels sumultaneously on all LF/MF/HF ham bands (or anything else) plus 6 meters\&.
.PP
A Raspberry Pi 5 can handle the RX888 MkII at half sample rate (64\&.8 MHz), enough to receive up to 30 MHz\&. (An external hardware anti-alias filter is required, and 'FFTW Wisdom' must be generated for the Pi5 to run this fast\&.)
.PP
.IP "2." 4
All I/O (both signal and control/status) uses IP multicasting\&. This makes it easy for more than one module, on the same computer or on a LAN, to operate on the outputs of other modules, or for individual modules to be restarted without restarting everything else\&.
.PP
.PP
If you want a user-friendly, interactive, graphics-laden SDR with a simple learning curve, then \fIka9q-radio\fP is NOT what you're looking for! (At least not yet\&.) Try one of the many excellent SDR programs already available like SDR#, Cubic SDR, gqrx, etc, or the standalone Kiwi SDR\&. This is my personal experiment in building a very different kind of SDR that runs as a component serving other applications\&.
.PP
The core components in \fIka9q-radio\fP run as Linux 'daemons' (background programs) with little (or no) user interaction\&. Turnkey systems can be configured to, e\&.g\&., demodulate and record every FM channel on a band, or decode, log and/or relay digital messages (e\&.g\&., APRS, FT-8, WSPR, Horus 4FSK, radiosondes)\&. These programs are automatically launched by the (new) Linux standard system manager program \fIsystemd\fP\&.
.PP
The core component is the \fIradiod\fP daemon\&. It reads an A/D stream directly from a front end and executes a configured set of digital downconverters and simple demodulators for various linear and FM modes, including AM, SSB, CW and a raw IQ mode intended mainly for use by other programs\&.
.PP
Previous versions (before mid-2023) of ka9q-radio had separate programs (e\&.g\&., \fIairspyd\fP) for talking to several makes of SDR front end hardware and generated an I/Q multicast stream for \fIradiod\fP\&. Because of performance problems, code and configuration complexity and general lack of utility these separate programs have been obsoleted and the front end drivers built directly into \fIradiod\fP\&. Support is currently provided for generic RTL-SDR dongles, the Airspy R2, Airspy HF+, AMSAT UK Funcube Pro+ and RX-888 Mk II\&. A synthetic front end, \fIsig_gen\fP, is also provided\&. It simulates a front end, either complex or real, producing gaussian noise and single carrier at specified amplitudes\&. It can also transmit my WWV/H simulator \fIwwvsim\fP, but it's not yet well integrated, mainly because of the need for an external speech synthesizer\&.
.PP
Support will be forthcoming for the SDRPlay and the HackRF (receive only)\&.
.PP
Two very rudimentary programs are provided for interactive use; \fImonitor\fP listens to one or more demodulated audio streams and \fIcontrol\fP controls and displays the status of a selected receiver channel\&. It can also create and delete dynamic channel instances\&. The \fIcontrol\fP program uses a flexible and extensible metadata protocol that could be (and I hope will be) implemented by much more sophisticated user interfaces\&. Various utilities are provided to record or play back signal streams, compress PCM audio into Opus, pipe a stream into digital demodulators, etc\&.
.PP
\fIRadiod\fP now periodically multicasts ('beacons') status information on each output stream and user programs are being enhanced to make use of it\&. For example, \fImonitor\fP now displays the frequency, mode and signal-to-noise ratio of each channe\&.
.PP
Although I've been running all this myself for several years, it is NOT yet ready for general use\&. A LOT of work still remains, especially documentation\&. But you're welcome to look at it, make comments and even try it out if you're feeling brave\&. I would especially like to hear from those interested in building it into their own SDR applications\&.
.PP
My big inspiration for the multichannel part of my project was this most excellent paper by Mark Borgerding: 'Turning Overlap-Save into a
Multiband Mixing, Downsampling Filter Bank'\&. You probably won't understand how it works until you've read it:
.PP
https://www.iro.umontreal.ca/~mignotte/IFT3205/Documents/TipsAndTricks/MultibandFilterbank.pdf
.PP
Although there are other ways to build efficient multichannel receivers, most notably the polyphase filter bank, fast convolution is extraordinarily flexible\&. Each channel is independently tunable with its own sample rate and filter response curve\&. The only requirement is that the impulse response of the channel filters be shorter than the (configurable) overlap interval in the forward FFT\&.
.PP
Updated 11 April 2024 
.br
 Phil Karn, KA9Q 
.br
 karn@ka9q.net 
